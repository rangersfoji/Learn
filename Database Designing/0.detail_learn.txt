jargon words(optional) :
    entity 
    
    query
    schema

    table/file
    row/tuple/record/entry
    column/attribute/field

    normalization = steps by which best design can be achived

Keys (optional):
    - primary key 
        - surrogate key = add new column to make unique primary key
        - natural key = column that is naturally unique in table and used as primary key
    - foreign key = primary_key/column of other table 
    - superkey = any column that can represent uniqueness of table 
    - candidatekey = least number of column that can represent uniqueness of table 

Primary Key Rules:
    - unique
    - not null
    - never change it

    Note: Foreign Key can change

Foreign Requirement:
    - must be same data type as primary key of related table EXAMPLE: varchar(45) | varchar(45)

Foreign Key constraints:
    Terms/Words:
        - ON_DELETE
        - ON_UPDATE
        - RESTRICT
        - CASCADE
        - SET_NULL
 
Relation ships:
    One-to-One(1:1) : it's more like attribute
        EXAMPLE: user's address detail but in different table
    One-to-Many(1:n) : order and orderstatus table [Look Up Table]
                    one order can have only one orderstatus
                    order table can have multiple same status
                OR 
                    user and credit card 
                    user can have multiple cards 
                    card can have only one user 
    Many-to-Many(n:m) : more this relationship you have to create middle/intermediary table in (sql database) 

    
    More:
        - with every relationship their is not_null
        if foreign key is not_null means child table has to have at least 1 parent

Joins:
    Types:
        1. Inner Join:
            - it joints two table and create new table
            - it shows only data which is not null 
            EXAMPLE:
                if you have table for customer and card 
                if you join customer.id == card.id 
                then if customer don't have card won't show up and visa-varsa

            - you can have multiple Inner Join
            - you can just use Inner Join as join
        
        2. Outer Join:
            - unlike Inner Join this join shows all data of 1 table where or not it has foreign key or not 
            EXAMPLE: 
                in above example:
                    - customer who has card & card who has Customer
                in this example:
                    - left join: select * from customer left join card where customer.id == card.id 
                        - all customer and card who has customer
                    - right join: select * from customer right join card where customer.id == card.id 
                        - all card and Customer who has card 

                RECCOMAND:
                    - use only left or right (I use left)
                    - don't mix left and right
        
        3. Self Join:
            - for that we have to use alias 
                alias : user as u "as is alias"

            EXAMPLE:
                user_id | first_name | last_name | email | refrered_by (user_id of onther user)

                SELECT t1.user_id, t1.first_name, t1.last_name, t1.email, t2.email AS "Referred By"
                FROM user AS t1 
                JOIN user AS t2 
                    ON t1.refered_by == t2.user_id

problems:
    data integrity:

        General:
            - one data change but connected dosen't update
            - relation between to table break
            - repeate same value in the table rather then create new table and connect it with id
            - fake wrong value in table
            -  Anomalies: you ment to update 1 row but it updates 10 rows

        Types:
            1. Entity integrity 
                - two or more same rows
                - data can not be unique
            2. Referential integrity 
                - broke two or more table relationship
            3. Domain integrity
                - different type of data 
                - example: string data in int column
 
Look Up table:
    - If the option type data are going to add in same table 
        create new table

    EXAMPLE: 
        - Order table have status 
        - if you have 'delivered' in you status, it is going repeate it self and take more space
            and if you want to chage it, you have to change to all other order with same status
        
    SOLUTION:
        - Create new table for that 
        - Reference it's key to other 
            if you want to change it will be easier and fater
            and if you want to add new column you can do that easily
 
Data design steps:
    conceptual = when you think and draw on paper
    logical = 
        - final product of strucured database will be created here
    physical = 
        - what relational database management system use?
        - what are table type?
        - what server are we going to use?
        - is it going to be on server or locally on computer?
        - create views according to person authorizations
    
Standard Databse Drawing Methods (optional):
    - EER Model 
    - ERD Model 
    - ER Model 

    Cardinality:
        check out image 1

    Modality:
        check out image 1

create column properties:
    primary-key
    foreign-key 
    data type
    unique 
    not null
    auto increment
    default value 
    ON_DELETE
    ON_UPDATE

    -----------
    index should create?  
    can be change [if its true then make form to edit/change it. EXAMPLE: change password]

What to do :
    general idea:
        1. think about your app and make draft 
        2. using normalization make database strucured and fater and powreful
        3. convert it as user friendly way using "views"

    rough idea:
        - Atomic Value: create evey thing atomic way
            EXAMPLE:
                insted of name column create 2 column firstName, lastName, middleName(optional)
        - break one table into two table (create new entity if you can)
        - can any column is eligible for look_up_table

    SETPS:
        1. draw all tables with only column name 

        ? after rough draft apply database Normalization

Databse Normalization:
    SETPS:
        - 1st NF (Normal Form)
        - 2nd NF 
        - 3rd NF

        1st Normal Form:
            - data should be atomic 
                EXAMPLE: Username FirstName LastName Address 
                    - here address containes multiple column related to address 
                    - so if you can create different entity then create new table 

                EXAMPLE: If you allow user to have 2 emails
                    - and you try to insert in one email row or create 2 same entry with different email 
                    - it is bad design
                    - so create new table for that 

            - in short any table can not have duplicate data in any column is best design
            

        2nd Normal Form:
            - deals with paritial dependency
                EXPLANATION:
                    - if you have to tables then which column related to which table
                    - related column goes to related table 

                    - in many to many relation ship 
                        - middle/intermediary table will have those column that is related to both table 

            ----------------
            here you implement or draw relationships like 1:1, 1:n, etc.

        3rd Normal Form:
            - deals with transitive dependency
                - it is like column dependends on column which dependends on primary_key

                EXAMPLE : 
                    - review_id | review | star | star_meaning | user_id(FK)

                    - here if you change star then star_meaning will be change 
                    - so star_meaning dependends on star where as star dependends on review

                    - if you want to find this kind of think then think like if you change one column then will any other column change?
                    - then it's need new table

                    - here you create star table :
                            star_id | star | star_meaning

After created databse:
    - Good Design: check every table at least have one natural key 
    - create indexes 
        [figure out all where name = "something", make name index]
        [join to table on t1.first_name = t2.firstName, make index firstName]

        - downsides:
            - it take more time to add/update/modeify/delete that data 
                if you are going to change/insert more than search/read then don't create it

    - create views

Index:
    Type:
        1. clustered index:
            - data stroed in sorted way
            - can have only 1 [like you can sort data only by name or only by price, etc]
        2. non clustered index:
            - data stored in unorder way but index points to data and index is sorted
            - can have as many as you want

            select * from table where firstName == "karan"
            - always create index for column that you are going to search [here firstName]
        3. composite index:
            EXAMPLE: select * from table where lastName == "Patel" and firstName == "Neel"

            - here you have to create composite key 
                here it optimise and create index for combined firstName and lastName field 
                however if you try to search only first name here, then you have to create different index only for that 

            - here order matter 
                django example: Customer.objects.filter(address__name__favoriteColor)
                sql/mysql example: select * from table where address == "something" and name == "something" and favoriteColor == "something"

                so you have to create composite key in that order

        



    downsides:
        - it takes more time to create, update, insert, delete 
        - so if you are not going to search about a column, do not make index of that

